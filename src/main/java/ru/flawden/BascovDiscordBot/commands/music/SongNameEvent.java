package ru.flawden.BascovDiscordBot.commands.music;

import com.sedmelluq.discord.lavaplayer.player.AudioPlayer;
import com.sedmelluq.discord.lavaplayer.track.AudioTrack;
import net.dv8tion.jda.api.EmbedBuilder;
import org.springframework.stereotype.Component;
import ru.flawden.BascovDiscordBot.config.eventconfig.Event;
import ru.flawden.BascovDiscordBot.config.eventconfig.EventArgs;
import ru.flawden.BascovDiscordBot.lavaplayer.PlayerManager;

import java.awt.*;

@Component
public class SongNameEvent implements Event {

    @Override
    public void execute(EventArgs event) {
        AudioPlayer audioPlayer = PlayerManager.getINSTANCE()
                .getMusicManager(event.getTextChannel().getGuild())
                .scheduler.audioPlayer;
        AudioTrack currentTrack = audioPlayer.getPlayingTrack();

        EmbedBuilder embed = new EmbedBuilder();
        embed.setColor(Color.CYAN);

        if (currentTrack == null) {
            embed.setTitle("üéµ –û—à–∏–±–∫–∞");
            embed.setDescription("–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º—ã—Ö –ø–µ—Å–µ–Ω!");
            event.getTextChannel().sendMessageEmbeds(embed.build()).queue();
            return;
        }

        String trackTitle = currentTrack.getInfo().title;
        String trackAuthor = currentTrack.getInfo().author;
        long position = currentTrack.getPosition();
        long duration = currentTrack.getDuration();
        boolean isPaused = audioPlayer.isPaused();

        if (trackTitle.length() > 50) {
            trackTitle = trackTitle.substring(0, 47) + "...";
        }
        if (trackAuthor.length() > 50) {
            trackAuthor = trackAuthor.substring(0, 47) + "...";
        }

        embed.setTitle("üéµ –°–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç");
        embed.setDescription("**–ù–∞–∑–≤–∞–Ω–∏–µ:** `" + trackTitle + "`\n" +
                "**–ê–≤—Ç–æ—Ä:** `" + trackAuthor + "`\n" +
                "**–ü–æ–∑–∏—Ü–∏—è:** `" + formatTime(position) + " / " + formatTime(duration) + "`\n" +
                (isPaused ? "‚ö†Ô∏è –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –Ω–∞ –ø–∞—É–∑–µ" : ""));
        event.getTextChannel().sendMessageEmbeds(embed.build()).queue();
    }

    private String formatTime(long millis) {
        long seconds = millis / 1000;
        long hours = seconds / 3600;
        long minutes = (seconds % 3600) / 60;
        long remainingSeconds = seconds % 60;
        return String.format("%02d:%02d:%02d", hours, minutes, remainingSeconds);
    }

    @Override
    public String getGroup() {
        return "–ú—É–∑—ã–∫–∞";
    }

    @Override
    public String getName() {
        return "SongName";
    }

    @Override
    public String helpMessage() {
        return "–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–µ–º–æ–π –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏";
    }

    @Override
    public boolean needOwner() {
        return false;
    }
}