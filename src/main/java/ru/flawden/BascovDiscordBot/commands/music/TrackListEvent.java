package ru.flawden.BascovDiscordBot.commands.music;

import com.sedmelluq.discord.lavaplayer.player.AudioPlayer;
import com.sedmelluq.discord.lavaplayer.track.AudioTrack;
import net.dv8tion.jda.api.EmbedBuilder;
import org.springframework.stereotype.Component;
import ru.flawden.BascovDiscordBot.config.eventconfig.Event;
import ru.flawden.BascovDiscordBot.config.eventconfig.EventArgs;
import ru.flawden.BascovDiscordBot.lavaplayer.PlayerManager;

import java.awt.*;
import java.util.Queue;

@Component
public class TrackListEvent implements Event {

    @Override
    public void execute(EventArgs event) {
        var musicManager = PlayerManager.getINSTANCE()
                .getMusicManager(event.getTextChannel().getGuild());
        AudioPlayer audioPlayer = musicManager.scheduler.audioPlayer;
        Queue<AudioTrack> tracks = musicManager.scheduler.queue;
        AudioTrack playingTrack = audioPlayer.getPlayingTrack();

        EmbedBuilder embed = new EmbedBuilder();
        embed.setColor(Color.CYAN);

        if (playingTrack == null && tracks.isEmpty()) {
            embed.setTitle("üé∂ –û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞");
            embed.setDescription("–°–µ–π—á–∞—Å –Ω–∏—á–µ–≥–æ –Ω–µ –∏–≥—Ä–∞–µ—Ç, –∏ –æ—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞.\n" +
                    "–î–æ–±–∞–≤—å –ø–µ—Å–Ω—é —Å –ø–æ–º–æ—â—å—é `!search <–Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ URL>`!");
            event.getTextChannel().sendMessageEmbeds(embed.build()).queue();
            return;
        }

        StringBuilder description = new StringBuilder();
        if (playingTrack != null) {
            String trackTitle = playingTrack.getInfo().title;
            String trackAuthor = playingTrack.getInfo().author;
            long position = playingTrack.getPosition();
            long duration = playingTrack.getDuration();
            boolean isPaused = audioPlayer.isPaused();

            if (trackTitle.length() > 50) {
                trackTitle = trackTitle.substring(0, 47) + "...";
            }
            if (trackAuthor.length() > 50) {
                trackAuthor = trackAuthor.substring(0, 47) + "...";
            }

            description.append("**–¢–µ–∫—É—â–∞—è –ø–µ—Å–Ω—è:**\n")
                    .append("`").append(trackTitle).append("` ‚Äî ").append(trackAuthor).append("\n")
                    .append("**–ü–æ–∑–∏—Ü–∏—è:** `").append(formatTime(position)).append(" / ").append(formatTime(duration)).append("`")
                    .append(isPaused ? "\n‚ö†Ô∏è –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –Ω–∞ –ø–∞—É–∑–µ" : "")
                    .append("\n\n");
        }

        if (tracks.isEmpty()) {
            description.append("**–û—á–µ—Ä–µ–¥—å:**\n–°–ø–∏—Å–æ–∫ —Å–ª–µ–¥—É—é—â–∏—Ö –ø–µ—Å–µ–Ω –ø—É—Å—Ç.");
        } else {
            description.append("**–û—á–µ—Ä–µ–¥—å (").append(tracks.size()).append("):**\n");
            int index = 1;
            for (AudioTrack track : tracks) {
                if (index > 10) {
                    description.append("...–∏ –µ—â—ë ").append(tracks.size() - 10).append(" —Ç—Ä–µ–∫–æ–≤.\n");
                    break;
                }
                String trackTitle = track.getInfo().title;
                String trackAuthor = track.getInfo().author;

                if (trackTitle.length() > 50) {
                    trackTitle = trackTitle.substring(0, 47) + "...";
                }
                if (trackAuthor.length() > 50) {
                    trackAuthor = trackAuthor.substring(0, 47) + "...";
                }

                description.append(index).append(". `").append(trackTitle).append("` ‚Äî ").append(trackAuthor).append("\n");
                index++;
            }
        }

        embed.setTitle("üé∂ –°–ø–∏—Å–æ–∫ —Ç—Ä–µ–∫–æ–≤");
        embed.setDescription(description.toString());
        event.getTextChannel().sendMessageEmbeds(embed.build()).queue();
    }

    private String formatTime(long millis) {
        long seconds = millis / 1000;
        long hours = seconds / 3600;
        long minutes = (seconds % 3600) / 60;
        long remainingSeconds = seconds % 60;
        return String.format("%02d:%02d:%02d", hours, minutes, remainingSeconds);
    }

    @Override
    public String getGroup() {
        return "–ú—É–∑—ã–∫–∞";
    }

    @Override
    public String getName() {
        return "TrackList";
    }

    @Override
    public String helpMessage() {
        return "–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–µ—Å–µ–Ω –≤ –æ—á–µ—Ä–µ–¥–∏";
    }

    @Override
    public boolean needOwner() {
        return false;
    }
}